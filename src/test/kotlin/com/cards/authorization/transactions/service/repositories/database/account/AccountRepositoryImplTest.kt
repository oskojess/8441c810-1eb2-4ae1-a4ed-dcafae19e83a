package com.cards.authorization.transactions.service.repositories.database.accountimport com.cards.authorization.transactions.service.common.AbstractInitializeTestimport com.cards.authorization.transactions.service.domain.exceptions.ResourceNotFoundExceptionimport com.cards.authorization.transactions.service.repositories.database.account.entity.toDomainimport com.cards.authorization.transactions.service.common.AccountBuilder.buildAccountimport com.cards.authorization.transactions.service.common.Constants.ACCOUNT_IDimport com.cards.authorization.transactions.service.common.Constants.CATEGORY_IDimport com.cards.authorization.transactions.service.common.Constants.INVALID_IDimport io.mockk.everyimport io.mockk.unmockkAllimport org.junit.jupiter.api.AfterEachimport io.mockk.junit5.MockKExtensionimport io.mockk.mockkimport io.mockk.verifyimport org.junit.jupiter.api.Assertions.assertNotNullimport org.junit.jupiter.api.Testimport org.junit.jupiter.api.assertThrowsimport org.junit.jupiter.api.extension.ExtendWithimport kotlin.test.assertEquals@ExtendWith(MockKExtension::class)internal class AccountRepositoryImplTest : AbstractInitializeTest() {    private val accountRepositoryJpa = mockk<AccountEntityRepositoryJpa>()    private val accountRepositoryImpl = AccountRepositoryImpl(accountRepositoryJpa)    override fun afterEach() {        unmockkAll()    }    @Test    fun `given an account id find with successully`() {        val account = buildAccount()        every { accountRepositoryJpa.findByAccountId(ACCOUNT_ID) } returns account        val actual = accountRepositoryImpl.findByAccountId(ACCOUNT_ID)        assertNotNull(actual)        assertEquals(account.accountId, account.accountId)        verify { accountRepositoryJpa.findByAccountId(ACCOUNT_ID) }    }    @Test    fun `given an fin account by category with success`() {        val account = buildAccount()        every { accountRepositoryJpa.findAccountByCategoryId(CATEGORY_ID) } returns account        val actual = accountRepositoryImpl.findAccountByCategoryId(CATEGORY_ID)        assertNotNull(actual)        assertEquals(account.category.id, account.category.id)        verify { accountRepositoryJpa.findAccountByCategoryId(CATEGORY_ID) }    }    @Test    fun `given a save a account `() {        val account = buildAccount()        every { accountRepositoryJpa.save(any()) } returns account        val actual = accountRepositoryImpl.save(account.toDomain())        assertNotNull(actual)        assertEquals(account.person.id, account.person.id)    }    @Test    fun `given a account id invalid then throws exception`() {        every { accountRepositoryJpa.findByAccountId(INVALID_ID) } returns null        assertThrows<ResourceNotFoundException> {            accountRepositoryImpl.findByAccountId(INVALID_ID)        }    }}