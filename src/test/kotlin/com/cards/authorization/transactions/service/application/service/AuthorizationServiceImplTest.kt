package com.cards.authorization.transactions.service.application.serviceimport com.cards.authorization.transactions.service.application.config.VisaMccPropertiesConfigimport com.cards.authorization.transactions.service.application.service.strategy.CashCategoryAuthorizationStrategyimport com.cards.authorization.transactions.service.application.service.strategy.PrimaryCategoryAuthorizationStrategyimport com.cards.authorization.transactions.service.application.service.type.AuthorizationCode.APPROVEDimport com.cards.authorization.transactions.service.application.service.type.AuthorizationCode.INSUFFICIENT_BALANCEimport com.cards.authorization.transactions.service.application.web.controller.authorization.dto.request.toTransactionDTOimport com.cards.authorization.transactions.service.common.AbstractInitializeTestimport com.cards.authorization.transactions.service.common.AccountBuilder.buildAccountimport com.cards.authorization.transactions.service.common.TransactionBuilder.buildTransactionimport com.cards.authorization.transactions.service.domain.account.AccountRepositoryimport com.cards.authorization.transactions.service.domain.account.AccountServiceimport com.cards.authorization.transactions.service.domain.account.entites.types.AccountCategoryTypeimport com.cards.authorization.transactions.service.domain.category.CategoryRepositoryimport com.cards.authorization.transactions.service.repositories.database.account.entity.toDomainimport io.mockk.everyimport io.mockk.junit5.MockKExtensionimport io.mockk.mockkimport io.mockk.unmockkAllimport io.mockk.verifyimport org.junit.jupiter.api.extension.ExtendWithimport java.math.BigDecimalimport kotlin.test.Testimport kotlin.test.assertNotNull@ExtendWith(MockKExtension::class)class AuthorizationServiceImplTest : AbstractInitializeTest() {    private val primaryCategoryAuthorizationStrategy = mockk<PrimaryCategoryAuthorizationStrategy>()    private val cashCategoryAuthorizationStrategy = mockk<CashCategoryAuthorizationStrategy>()    private val visaMccPropertiesConfig = mockk<VisaMccPropertiesConfig>()    private val categoryRepository = mockk<CategoryRepository>()    private val accountRepository = mockk<AccountRepository>()    private val accountService = mockk<AccountService>(relaxed = true)    private val accountServiceImpl = AuthorizationServiceImpl(        primaryCategoryAuthorizationStrategy,        cashCategoryAuthorizationStrategy,        visaMccPropertiesConfig,        categoryRepository,        accountService    )    override fun afterEach() {        unmockkAll()    }    @Test    fun `must be authorize the transaction in the CASH category due to insufficient balance in the primary category`() {        val transaction = buildTransaction(totalAmount = BigDecimal(10.00)).toTransactionDTO()        val cashAccount = buildAccount().toDomain()        val getCodeTransactionsDetails = Pair("CASH", "5411")        every { visaMccPropertiesConfig.getTypeOperations(any()) } returns getCodeTransactionsDetails        every { accountService.findAccountByCategoryType(any()) } returns cashAccount        every { categoryRepository.findById(any()) } returns mockk {            every { type?.name } returns AccountCategoryType.CASH.name        }        every { cashCategoryAuthorizationStrategy.evaluateAuthorization(cashAccount, transaction) } returns APPROVED        every { primaryCategoryAuthorizationStrategy.evaluateAuthorization(cashAccount, transaction) } returns INSUFFICIENT_BALANCE        every { accountRepository.findByAccountId(any()) } returns cashAccount        val result = accountServiceImpl.authorize(cashAccount, transaction)        assertNotNull(result)        verify { cashCategoryAuthorizationStrategy.evaluateAuthorization(cashAccount, transaction) }    }}