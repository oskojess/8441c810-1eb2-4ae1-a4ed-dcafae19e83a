package com.cards.authorization.transactions.service.repositories.database.categoryimport com.cards.authorization.transactions.service.domain.account.entites.types.AccountCategoryType.FOODimport com.cards.authorization.transactions.service.domain.exceptions.ResourceNotFoundExceptionimport com.cards.authorization.transactions.service.common.AbstractInitializeTestimport com.cards.authorization.transactions.service.common.CategoryBuilder.buildCategoryimport com.cards.authorization.transactions.service.common.Constants.CATEGORY_IDimport com.cards.authorization.transactions.service.common.Constants.INVALID_IDimport io.mockk.everyimport io.mockk.junit5.MockKExtensionimport io.mockk.mockkimport io.mockk.unmockkAllimport io.mockk.verifyimport org.junit.jupiter.api.AfterEachimport org.junit.jupiter.api.Assertions.assertNotNullimport org.junit.jupiter.api.Testimport org.junit.jupiter.api.assertThrowsimport org.junit.jupiter.api.extension.ExtendWithimport kotlin.test.assertEquals@ExtendWith(MockKExtension::class)internal class CategoryRepositoryImplTest : AbstractInitializeTest() {    private val categoryRepositoryJpa = mockk<CategoryRepositoryJpa>()    private val categoryRepositoryImpl = CategoryRepositoryImpl(categoryRepositoryJpa)    @AfterEach    fun tearDown() {        unmockkAll()    }    @Test    fun `given an category id find with successully`() {        val category = buildCategory(            id = CATEGORY_ID,            type = FOOD        )        every { categoryRepositoryJpa.findByCategoryId(CATEGORY_ID) } returns category        val actual = categoryRepositoryImpl.findById(CATEGORY_ID)        assertNotNull(actual)        assertEquals(CATEGORY_ID, actual.id)        assertEquals(category.type, actual.type)        verify { categoryRepositoryJpa.findByCategoryId(CATEGORY_ID) }    }    @Test    fun `given a category id invalid then throws exception`() {        every { categoryRepositoryJpa.findByCategoryId(INVALID_ID) } returns null        assertThrows<ResourceNotFoundException> {            categoryRepositoryImpl.findById(INVALID_ID)        }    }}