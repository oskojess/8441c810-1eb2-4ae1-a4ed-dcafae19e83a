package com.cards.authorization.transactions.service.common.extensionimport com.cards.authorization.transactions.service.application.config.http.Constants.AUTHORIZATION_HEADER_KEYimport com.cards.authorization.transactions.service.application.config.http.Constants.INTERNAL_SERVER_ERRORimport com.cards.authorization.transactions.service.application.exceptions.BaseExceptionimport feign.Responseimport java.nio.charset.StandardCharsetsfun getDetails(response: Response) =    mapOf(        "status" to response.status(),        "request" to response.request().let {            mapOf(                "url" to it.url(),                "headers" to it.headers().filterNot { header -> header.key == AUTHORIZATION_HEADER_KEY }            )        },        "response" to mapOf(            "body" to response.body(),            "headers" to response.headers().entries        )    )fun Response.bodyString(methodKey: String): String {    var message = ""    runCatching {        message = this.body()?.asReader(StandardCharsets.UTF_8)?.readText() ?: ""    }.onFailure {        message = "Failed to parse the payload for method $methodKey"    }    return message}fun throwBaseException(response: Response, message: String): Throwable {    throw BaseException(        type = INTERNAL_SERVER_ERROR,        message = message,        details = getDetails(response)    )}