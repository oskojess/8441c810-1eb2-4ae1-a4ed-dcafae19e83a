package com.cards.authorization.transactions.service.application.config.httpimport com.cards.authorization.transactions.service.commons.extension.bodyStringimport com.cards.authorization.transactions.service.commons.extension.getDetailsimport com.cards.authorization.transactions.service.commons.extension.throwBaseExceptionimport com.cards.authorization.transactions.service.application.exceptions.BadRequestExceptionimport feign.Responseimport feign.codec.ErrorDecoderprivate const val BAD_REQUEST = 400class FeignCustomError : ErrorDecoder {    override fun decode(methodKey: String, response: Response): Exception {        val message = response.bodyString(methodKey)        when (response.status()) {            BAD_REQUEST -> throw BadRequestException(                message = response.reason(),                details = getDetails(response)            )            else -> throw throwBaseException(response, message)        }    }}