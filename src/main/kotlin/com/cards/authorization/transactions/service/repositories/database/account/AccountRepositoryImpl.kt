package com.cards.authorization.transactions.service.repositories.database.accountimport com.cards.authorization.transactions.service.domain.account.AccountRepositoryimport com.cards.authorization.transactions.service.domain.account.entites.Accountimport com.cards.authorization.transactions.service.domain.exceptions.ResourceNotFoundExceptionimport com.cards.authorization.transactions.service.repositories.database.account.entity.toDomainimport com.cards.authorization.transactions.service.repositories.database.account.entity.toEntityimport org.springframework.stereotype.Component@Componentclass AccountRepositoryImpl(    private val accountEntityRepositoryJpa: AccountEntityRepositoryJpa) : AccountRepository {    override fun save(account: Account): Account {        return accountEntityRepositoryJpa.save(account.toEntity()).toDomain()    }    override fun findByAccountId(AccountId: String): Account {        return accountEntityRepositoryJpa.findByAccountId(AccountId)?.toDomain()            ?: throw ResourceNotFoundException("Account not found for ${AccountId}")    }    override fun findAccountByCategoryId(categoryId: String): Account {        return accountEntityRepositoryJpa.findAccountByCategoryId(categoryId)?.toDomain()            ?: throw ResourceNotFoundException("Account not found for ${categoryId}")    }}