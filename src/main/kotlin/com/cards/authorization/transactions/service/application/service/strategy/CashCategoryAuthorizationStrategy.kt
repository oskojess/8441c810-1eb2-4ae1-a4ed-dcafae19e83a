package com.cards.authorization.transactions.service.application.service.strategyimport com.cards.authorization.transactions.service.application.service.dto.TransactionDTOimport com.cards.authorization.transactions.service.application.service.type.AuthorizationCode.APPROVEDimport com.cards.authorization.transactions.service.application.service.type.AuthorizationCode.INSUFFICIENT_BALANCEimport com.cards.authorization.transactions.service.domain.account.AccountRepositoryimport com.cards.authorization.transactions.service.domain.account.entites.Accountclass CashCategoryAuthorizationStrategy(    accountRepository: AccountRepository,) : BaseEvaluateAuthorizationStrategy<Account, TransactionDTO>(accountRepository) {    override fun evaluateAuthorization(account: Account, transaction: TransactionDTO): String {        return if (hasSufficientBalance(account, transaction.totalAmount)) {            makeDebit(account, transaction.totalAmount)            APPROVED        } else {            INSUFFICIENT_BALANCE        }    }}