package com.cards.authorization.transactions.service.application.service.strategyimport com.cards.authorization.transactions.service.domain.account.AccountRepositoryimport com.cards.authorization.transactions.service.domain.account.entites.Accountimport java.math.BigDecimalabstract class BaseEvaluateAuthorizationStrategy<A, T>(    private val accountRepository: AccountRepository) : EvaluateAuthorizationStrategy<A, T> {    protected fun hasSufficientBalance(account: Account, amount: BigDecimal): Boolean {        return account.balance >= amount    }    protected fun makeDebit(account: Account, amount: BigDecimal) {        account.balance -= amount        accountRepository.save(account)    }    abstract fun evaluateAuthorization(account: A, transaction: T): String}