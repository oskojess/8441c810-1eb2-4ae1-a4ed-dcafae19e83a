package com.cards.authorization.transactions.service.repositories.database.account.entityimport com.cards.authorization.transactions.service.domain.account.entites.Accountimport com.cards.authorization.transactions.service.domain.account.entites.PersonCategoryIdVOimport com.cards.authorization.transactions.service.domain.account.entites.types.AccountCategoryTypeimport com.cards.authorization.transactions.service.repositories.database.category.entity.CategoryEntityimport com.cards.authorization.transactions.service.repositories.database.person.entity.PersonEntityimport jakarta.persistence.Columnimport jakarta.persistence.EmbeddedIdimport jakarta.persistence.Entityimport jakarta.persistence.JoinColumnimport jakarta.persistence.ManyToOneimport jakarta.persistence.MapsIdimport jakarta.persistence.Tableimport java.math.BigDecimal@Entity@Table(name = "accounts")class AccountEntity(    @Column(name = "accountId")    val accountId: String,    @ManyToOne    @MapsId("person")    @JoinColumn(name = "person_id")    val person: PersonEntity,    @ManyToOne    @MapsId("category")    @JoinColumn(name = "category_id")    val category: CategoryEntity,    @Column(nullable = false)    val balance: BigDecimal,    @EmbeddedId    val personCategory: PersonCategoryId,    )fun AccountEntity.toDomain() = Account(    accountId = accountId,    person = person.id,    category = category.id,    balance = balance,    personCategory = PersonCategoryIdVO(        category = category.id,        personId = person.id    ))fun Account.toEntity() = AccountEntity(    accountId = accountId,    person = PersonEntity(        id = person,        createdAt = createdAt,        updatedAt = updatedAt    ),    category = CategoryEntity(        id = category,        createdAt = createdAt,        updatedAt = updatedAt    ),    balance = balance,    personCategory = PersonCategoryId(        category = category,        person = person    ))